import express from 'express';
import webpush from 'web-push';
import bodyParser from 'body-parser';
import cors from 'cors';
import fs from 'fs/promises'; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fs
import path from 'path';

const app = express();
app.use(cors({
    origin: ['http://localhost:5173', 'https://k0ng999.github.io'],
    methods: ['GET', 'POST'],
    allowedHeaders: ['Content-Type'],
}));
app.use(bodyParser.json());

const port = process.env.PORT || 4000;
const subscriptionsFile = path.resolve('./subscriptions.json');

// üîë VAPID
const vapidKeys = {
    publicKey: 'BLJwDpwOACqIj4pn9vkzHE9wyrSvR64EzbzCdjK5G4GKRzMXv9d_Fr2qzdSuwtXxVI35-ZPlIPJDxlYZoz00fr4',
    privateKey: '9AGMPFIYdXbTdA5kgzVevjQMdj8aPDvXgNPrzAkSqIA',
};
webpush.setVapidDetails('mailto:test@example.com', vapidKeys.publicKey, vapidKeys.privateKey);

// --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º ---
async function getSubscriptions() {
    try {
        const raw = await fs.readFile(subscriptionsFile, 'utf8');
        if (!raw.trim()) return [];
        return JSON.parse(raw);
    } catch (err) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ JSON –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if (err.code !== 'ENOENT') console.error('[FS] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
        return [];
    }
}


// --- –†–æ—É—Ç—ã ---
app.get('/vapidPublicKey', (req, res) => {
    res.send(vapidKeys.publicKey);
});

app.post('/subscribe', async (req, res) => {
    try {
        const subscription = req.body;
        if (!subscription || !subscription.endpoint) {
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏' });
        }

        const subs = await getSubscriptions();
        const exists = subs.some(s => s.endpoint === subscription.endpoint);
        if (!exists) {
            console.log('[SERVER] –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É:------------------------------------------------------------->', subscription);
        } else {
            // console.log('[SERVER] –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', subscription.endpoint);
        }

        res.status(201).json({ success: true });
    } catch (err) {
        console.error('[SERVER] /subscribe error:', err);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' });
    }
});

app.post('/sendNotification', async (req, res) => {
    try {
        // 1) –ó–∞–±–∏—Ä–∞–µ–º senderSubscription –∏–∑ —Ç–µ–ª–∞
        let sender = req.body?.senderSubscription;

        // 2) –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if (typeof sender === 'string') {
            try {
                sender = JSON.parse(sender);
            } catch (e) {
                // –ï—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º
                sender = null;
            }
        }

        // 3) –ï—Å–ª–∏ sender –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º endpoint
        let senderEndpoint = null;
        if (sender && typeof sender.endpoint === 'string') {
            senderEndpoint = sender.endpoint.trim();
        }

        // 4) –ß–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const allSubs = await getSubscriptions();

        // 5) –§–∏–ª—å—Ç—Ä—É–µ–º ‚Äî –∏—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
        const recipients = allSubs.filter(s => {
            const ep = typeof s.endpoint === 'string' ? s.endpoint.trim() : '';
            return senderEndpoint ? ep !== senderEndpoint : true;
        });

        // 6) –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç
        if (recipients.length === 0) {
            return res.status(200).json({ success: true, message: '–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π' });
        }

        // 7) –ì–æ—Ç–æ–≤–∏–º payload
        let payload;
        const p256dh = sender?.keys?.p256dh;

        if (p256dh === 'BIpp8vWQzNbwg-kYYI11_FZoRu0N-pxLelRsx8s-FuR5AuMrFcZSvMabV-1eu7_d9M9P3OxqiqbLvftkUt1XxRA') {
            payload = JSON.stringify({ title: '–ê–Ω–≥–µ–ª–∏–Ω–∞ –Ω–∞–∂–∞–ª–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É', body: '–Ø —Ç–µ–±—è –ª—é–±–ª—é!', icon: "logo.png" });
        } else if (p256dh === 'BPixk2h1Ys5KnHTr7x1f2Dq3a86TyAL4MNDqi1uFW0MVUBGVel225vuIHCCDuR-7MGga-eI5Rvq5dVPkKLwfqps') {
            payload = JSON.stringify({ title: '–í–∞–Ω—è –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É', body: '–Ø —Ç–µ–±—è –ª—é–±–ª—é!', icon: "logo.png" });
        } else {
            payload = JSON.stringify({ title: '–í–∞–Ω—è –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É', body: '–Ø —Ç–µ–±—è –ª—é–±–ª—é!', icon: "logo.png" });
        }

        // 8) –†–∞—Å—Å—ã–ª–∫–∞
        await Promise.allSettled(
            recipients.map(sub => webpush.sendNotification(sub, payload))
        );

        return res.status(200).json({ success: true });
    } catch (err) {
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
    }
});




app.use((err, req, res, next) => {
    // console.error('[SERVER] Unhandled error:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

app.listen(port, () => console.log(`Server started on port ${port}`));
// 1 - —è–Ω–¥–∫–µ—Å
// 2 - –º–æ–π –∞–π—Ñ–æ–Ω
// 3 - –∞–Ω–≥–µ–ª–∏–Ω–∞